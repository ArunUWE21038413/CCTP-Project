using UnityEngine;

public class PerlinNoiseGenerator : MonoBehaviour
{
    [Header("Texture Settings")]
    public int textureWidth = 256;  // Width of the texture
    public int textureHeight = 256; // Height of the texture
    public float scale = 20f;       // Scale of the noise pattern
    public float offsetX = 0f;      // Horizontal offset
    public float offsetY = 0f;      // Vertical offset

    [Header("Noise Parameters")]
    [Range(1, 8)]
    public int octaves = 1;         // Number of layers of noise
    [Range(0f, 1f)]
    public float persistence = 0.5f; // Controls amplitude reduction with each octave
    public float lacunarity = 2.0f; // Controls frequency increase with each octave

    [Header("Options")]
    public bool showPreview = true; // Toggle to show or hide preview in the scene
    public bool autoUpdate = false; // Automatically update the texture when parameters change
    public bool build = true; // Controls whether the noise generation is active in build or not
    

    private Texture2D noiseTexture; // The texture generated by Perlin noise
    private Renderer renderer;      // Renderer component to apply the texture

    void Start()
    {
        renderer = GetComponent<Renderer>();
        if (autoUpdate)
        {
            GenerateNoiseTexture();
        }
    }

    /// <summary>
    /// Generates the Perlin noise texture with the specified parameters.
    /// </summary>
    void GenerateNoiseTexture()
    {
        // Create a new texture
        noiseTexture = new Texture2D(textureWidth, textureHeight);

        // Loop through each pixel
        for (int x = 0; x < textureWidth; x++)
        {
            for (int y = 0; y < textureHeight; y++)
            {
                // Calculate noise value using multiple octaves
                float noiseValue = CalculatePerlinNoise(x, y);

                // Set pixel color (grayscale based on noise value)
                noiseTexture.SetPixel(x, y, new Color(noiseValue, noiseValue, noiseValue));
            }
        }

        // Apply changes to the texture
        noiseTexture.Apply();

        // Assign the texture to the material
        renderer.material.mainTexture = noiseTexture;
    }

    /// <summary>
    /// Calculates Perlin noise with multiple octaves.
    /// </summary>
    /// <param name="x">The x-coordinate of the pixel.</param>
    /// <param name="y">The y-coordinate of the pixel.</param>
    /// <returns>The calculated Perlin noise value.</returns>
    float CalculatePerlinNoise(int x, int y)
    {
        float noiseValue = 0f;
        float amplitude = 1f;
        float frequency = 1f;
        float maxAmplitude = 0f; // Used for normalization

        // Loop through each octave
        for (int i = 0; i < octaves; i++)
        {
            float xCoord = (x / (float)textureWidth * scale * frequency) + offsetX;
            float yCoord = (y / (float)textureHeight * scale * frequency) + offsetY;

            noiseValue += Mathf.PerlinNoise(xCoord, yCoord) * amplitude;

            maxAmplitude += amplitude;
            amplitude *= persistence; // Decrease amplitude
            frequency *= lacunarity;  // Increase frequency
        }

        // Normalize the noise value to 0-1
        return noiseValue / maxAmplitude;
    }

    void Update()
    {
        // Regenerate texture if Auto Update is enabled
        if (autoUpdate)
        {
            GenerateNoiseTexture();
        }
    }

    /// <summary>
    /// Method to show or hide the noise preview in the scene.
    /// </summary>
    void OnDrawGizmos()
    {
        if (showPreview && noiseTexture != null)
        {
            Gizmos.color = Color.white;
            Gizmos.DrawWireCube(transform.position, new Vector3(1, 0, 1));
        }
    }
}


